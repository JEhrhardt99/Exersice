# clear global environment
rm(list = ls())
library(tidyverse)
library(estimatr)
library(modelsummary)
library(visdat)
library(dplyr)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to script location
setwd("../..") # move up to the project root directory
getwd() # check if wd is the root directory
df_STAN <- read.csv("main/Data_sets/STAN_ALL.csv")
df_small <- df_STAN[c("COUNTRY",
"YEAR",
"VALU",
"WAGE",
"INDUSTRY",
"ISICREV3")]
vis_dat(df_small)
df_small <- df_small[order(df_small$COUNTRY, df_small$INDUSTRY, df_small$YEAR),]
df_small <- df_small %>%
group_by(COUNTRY, INDUSTRY) %>%
mutate(idnr = group_indices())
View(df_small)
df_small <- df_small %>%
group_by(idnr) %>%
mutate(VALU_lag_1 = dplyr::lag(VALU, n = 1L, default = NA,))
df_small$VALU_gr <- (df_small$VALU - df_small$VALU_lag_1)/df_small$VALU_lag_1
df_small <- df_small %>%
group_by(idnr) %>%
mutate(WAGE_lag_1 = dplyr::lag(WAGE, n = 1L, default = NA,))
df_small$WAGE_gr <- (df_small$WAGE - df_small$WAGE_lag_1)/df_small$WAGE_lag_1
vis_dat(df_small)
View(df_small)
View(df_small)
df_small <- df_small %>%
filter(!is.na(WAGE) | !is.na(VALU))
vis_dat(df_small)
# Information -------------------------------------------------------------
# Forecasting Methods WiSe 24/25
# Jannes Ehrhardt
# Problem Set I
# Commands for version control with git:
# cd PATH
# git status
# git add .
# git commit -m "header"
# git push -u origin main
# clear global environment
rm(list = ls())
# Packages ----------------------------------------------------------------
# Install
# install.packages("tidyverse")
# Load
library(tidyverse)
library(estimatr)
library(modelsummary)
library(visdat)
library(dplyr)
# Working Directory -------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to script location
setwd("../..") # move up to the project root directory
getwd() # check if wd is the root directory
# Read Data ---------------------------------------------------------------
# Example for reading data from this repositories root folder:
# data <- read.csv("main/Data_sets/BASF.csv")
# write.csv(data, "main/Problem_Sets_Output/processed_data.csv")
df_STAN <- read.csv("main/Data_sets/STAN_ALL.csv")
# vis_dat(df_STAN,
#         warn_large_data = FALSE)
# Nr. 2 -------------------------------------------------------------------
df_small <- df_STAN[c("COUNTRY",
"YEAR",
"VALU",
"WAGE",
"INDUSTRY",
"ISICREV3")]
vis_dat(df_small)
# Nr. 3 -------------------------------------------------------------------
# first order the dataframe first after country, then industry and then year
df_small <- df_small[order(df_small$COUNTRY, df_small$INDUSTRY, df_small$YEAR),]
# Use group_by() and group_indices create a unique industry id
df_small <- df_small %>%
group_by(COUNTRY, INDUSTRY) %>%
mutate(idnr = group_indices())
# create a variable that is the lag of VALU so everything for the growth rate is in one row
df_small <- df_small %>%
group_by(idnr) %>%
mutate(VALU_lag_1 = dplyr::lag(VALU, n = 1L, default = NA,))
# calcualte the growth rate of valu added
df_small$VALU_gr <- (df_small$VALU - df_small$VALU_lag_1)/df_small$VALU_lag_1
# Nr. 4 -------------------------------------------------------------------
# create a variable that is the lag of wage so everything for the growth rate is in one row
df_small <- df_small %>%
group_by(idnr) %>%
mutate(WAGE_lag_1 = dplyr::lag(WAGE, n = 1L, default = NA,))
# calcualte the growth rate of wages
df_small$WAGE_gr <- (df_small$WAGE - df_small$WAGE_lag_1)/df_small$WAGE_lag_1
# heatmapp
vis_dat(df_small)
# Nr. 5 -------------------------------------------------------------------
df_small2 <- df_small %>%
filter(!is.na(WAGE) | !is.na(VALU))
vis_dat(df_small2)
library(ggplot2)
df_france_trailer <- df_small2[(df_small2$COUNTRY == "FRA"),]
View(df_france_trailer)
unique(df_france_trailer$INDUSTRY)
install.packages("stringr")
install.packages("stringr")
library(stringr)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "Motor Vehicles, Trailers and Semi-Trailers")) %>%
select(idnr, INDUSTRY)
find_trailer
View(find_trailer)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "Semi-Trailers")) %>%
select(idnr, INDUSTRY)
View(find_trailer)
View(df_france_trailer)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "TRAILer")) %>%
select(idnr, INDUSTRY)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "TRAILer")) %>%
select(idnr, INDUSTRY)
View(find_trailer)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "AIR")) %>%
select(idnr, INDUSTRY)
View(find_trailer)
find_trailer <- df_france_trailer %>%
filter(str_detect(INDUSTRY, "TRAILER")) %>%
select(idnr, INDUSTRY)
View(find_trailer)
View(find_trailer)
View(find_trailer)
df_france_trailer <- df_france_trailer[(df_small2$idnr == 890),]
df_france_trailer <- df_france_trailer[(df_france_trailer$idnr == 890),]
View(df_france_trailer)
library(ggthemes)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr, color = category)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73")) +  # Custom colors
labs(
title = "Fancy Scatterplot with ggplot2 and ggthemes",
subtitle = "Aesthetic Scatterplot Example",
x = "X-Axis Label",
y = "Y-Axis Label",
color = "Category"
) +
theme_minimal(base_size = 15) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr, color = category)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Fancy Scatterplot with ggplot2 and ggthemes",
subtitle = "Aesthetic Scatterplot Example",
x = "X-Axis Label",
y = "Y-Axis Label",
color = "Category"
) +
theme_minimal(base_size = 15) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Fancy Scatterplot with ggplot2 and ggthemes",
subtitle = "Aesthetic Scatterplot Example",
x = "X-Axis Label",
y = "Y-Axis Label",
color = "Category"
) +
theme_minimal(base_size = 15) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
vis_dat(df_france_trailer)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Fancy Scatterplot with ggplot2 and ggthemes",
subtitle = "Aesthetic Scatterplot Example",
x = "X-Axis Label",
y = "Y-Axis Label",
color = "Category"
) +
theme_minimal(base_size = 15) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_minimal(base_size = 15) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_minimal(base_size = 1) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_minimal(base_size = 30) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_minimal(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +  # Point size and transparency
scale_color_manual(values = c("#E69F00", "#56B4E9")) +  # Custom colors
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_few(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
# Scatterplot
ggplot(df_france_trailer, aes(x = VALU_gr, y = WAGE_gr)) +
geom_point(size = 4, alpha = 0.7) +
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth",
x = "Value added groth rates",
y = "Wage growth rates",
color = "Category"
) +
theme_few(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
ggplot(df_france_trailer, aes(x = YEAR)) +
geom_line(aes(y = VALU_gr, color = "Value Growth"), size = 1.2) +
geom_line(aes(y = WAGE_gr, color = "Wage Growth"), size = 1.2) +
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth over time",
x = "Year",
y = "Growth Rates",
color = "Category"
) +
theme_few(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
ggplot(df_france_trailer, aes(x = YEAR)) +
geom_line(aes(y = VALU_gr, color = "Value Growth"), linewidth = 1.2) +
geom_line(aes(y = WAGE_gr, color = "Wage Growth"), linewidth = 1.2) +
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth over time",
x = "Year",
y = "Growth Rates",
color = "Category"
) +
theme_few(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
ggplot(df_france_trailer, aes(x = YEAR)) +
geom_line(aes(y = VALU_gr, color = "Value Growth"), linewidth = 1.2) +
geom_line(aes(y = WAGE_gr, color = "Wage Growth"), linewidth = 1.2) +
labs(
title = "Motor Vehicles, Trailers and Semi-Trailers sector",
subtitle = "Wage growth and Value growth over time",
x = "Year",
y = "Growth Rates",
color = "Lines:"
) +
theme_few(base_size = 10) +  # Minimal theme
theme(
plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
plot.subtitle = element_text(size = 14, hjust = 0.5),
legend.position = "top"
)
mean_VALU_gr <- mean(df_france_trailer$VALU_gr)
mean_VALU_gr
mean_VALU_gr <- mean(df_france_trailer$VALU_gr,
NA = TRUE)
mean_VALU_gr <- mean(df_france_trailer$VALU_gr,
na.rm = TRUE)
mean_WAGE_gr <- mean(df_france_trailer$WAGE_gr,
na.rm = TRUE)
# Datenrahmen für die Visualisierung erstellen
df_means <- data.frame(
Category = c("VALU_gr", "WAGE_gr"),
Mean = c(mean_VALU_gr, mean_WAGE_gr)
)
View(df_means)
# Diagramm erstellen
ggplot(df_means, aes(x = Category, y = Mean, label = round(Mean, 2))) +
geom_bar(stat = "identity", fill = "lightblue") +  # Balken darstellen
geom_text(aes(label = round(Mean, 2)),
vjust = -0.5,
fontface = "bold",
size = 6) +  # Mittelwerte fett anzeigen
theme_minimal() +  # Minimaler Stil
labs(title = "Mittelwerte von VALU_gr und WAGE_gr",
x = "Kategorie",
y = "Mittelwert") +
theme(text = element_text(size = 14, face = "bold"))  # Gesamttext fett darstellen
# Neues leeres Plot-Fenster erstellen
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: ", round(mean_VALU_gr, 2)),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: ", round(mean_WAGE_gr, 2)),
cex = 2, font = 2)
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: ", round(mean_WAGE_gr, 7)),
cex = 2, font = 2)
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: ", round(mean_VALU_gr, 7)),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: ", round(mean_WAGE_gr, 7)),
cex = 2, font = 2)
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7)),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7)),
cex = 2, font = 2)
# Neues leeres Plot-Fenster erstellen
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7)),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7)),
cex = 2, font = 2)
# Neues leeres Plot-Fenster erstellen
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7), "\n"),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7), "\n"),
cex = 2, font = 2)
# Neues leeres Plot-Fenster erstellen
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7), "\n \n"),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7), "\n"),
cex = 2, font = 2)
# Neues leeres Plot-Fenster erstellen
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7), "\n \n \n \n"),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7), "\n"),
cex = 2, font = 2)
plot.new()
# Plot-Bereich definieren
plot.window(xlim = c(0, 10), ylim = c(0, 10))
# Text fett in der Mitte des Bildes darstellen
text(x = 5, y = 6,
labels = paste0("Mean VALU_gr: \n", round(mean_VALU_gr, 7), "\n \n \n \n"),
cex = 2, font = 2)  # `cex` für Textgröße, `font = 2` für Fett
text(x = 5, y = 4,
labels = paste0("Mean WAGE_gr: \n", round(mean_WAGE_gr, 7)),
cex = 2, font = 2)
