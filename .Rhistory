x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# make it more pretty
ggplot(basf,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# add Shares Column
basf_ts <- basf %>%
mutate(shares = "BSAF")
# save dataset
write_csv(basf_ts,
"main/Data_sets/BSAF_1.csv")
# Append Data ------------------------------------------------------------------
stock <- rbind(dax_ts,
VW_ts,
basf_ts)
# clear environment
rm(VW,
dax,
basf)
# rearange by shares and then date
stock <- stock %>%
arrange(shares, Date)
# create unique ids by grouping
stock <- stock %>%
group_by(shares) %>%
mutate(ID = cur_group_id()) %>%
ungroup()
# Centered Moving Average -----------------------------------------------------
# by using a predefined
# wrong example!!!
stock$sm_5 <- sm(stock$adj_close)
sm <- function(x, n = 5) {
stats::filter(x, rep(1/n, n), sides = 2) # choose two sides because it is centered
}
# wrong example!!!
stock$sm_5 <- sm(stock$adj_close)
View(stock)
# CORRECT example!!!
stock <- stock %>%
group_by(ID) %>%
mutate(sm_5 = sm(adj_close)) %>%
ungroup()
View(stock)
# CORRECT example!!!
stock <- stock %>%
group_by(ID) %>%
mutate(sm_5 = sm(adj_close)) %>%
ungroup()
View(stock)
# Information -------------------------------------------------------------
# Forecasting Methods WiSe 24/25
# Jannes Ehrhardt
# Exercice III
# Commands for version control with git:
# cd PATH
# git status
# git add .
# git commit -m "header"
# git push -u origin main
# clear global environment
rm(list = ls())
# Packages ----------------------------------------------------------------
# Install
# install.packages("tidyverse")
# Load
library(tidyverse)
library(estimatr)
library(modelsummary)
library(visdat)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(stringr)
library(haven)
library(Hmisc)
library(expss)
library(dplyr)
library(forecast)
library(lubridate)
library(zoo)
library(xts)
library(gridExtra)
library(estimatr)
# Working Directory -------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to script location
setwd("../..") # move up to the project root directory
getwd() # check if wd is the root directory
# Load Data ---------------------------------------------------------------
dax <- read_csv("main/Data_sets/DAX.csv",
show_col_types = FALSE)
# Data Preprocessing ------------------------------------------------------
# rename columns:
dax <- dax %>%
rename(adj_close = "Adj Close") %>%
arrange(Date)
# check structure data
class(dax$Date)
str(dax)
# Subject data for Adj_close
dax_ts <- dax %>%
select(adj_close)
# set adj_close as time series object
dax_ts <- ts(dax_ts,
start = c(2009, 1), # start date: Januar 2009
frequency = 365.25) # Frequency: daily (also account for leap years every 4 years)
# plot dax_ts using ggplot2
autoplot(dax_ts) +
theme_few() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# make it more pretty
ggplot(dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# Is there seasonality?
# There is some kind of seasonality, but it
# is not very strong and it looks rather like additive seasonality.
# What do we do with it now?
# TS Analysis -------------------------------------------------------------
# Generate a new column
dax_ts <- dax %>%
mutate(shares = "dax")
# save dataset
write_csv(dax_ts,
"main/Data_sets/dax_1.csv")
# VW ----------------------------------------------------------------------
# Second data VW
# Load Data ---------------------------------------------------------------
VW <- read_csv("main/Data_sets/VW.csv",
show_col_types = FALSE)
# Data Preprocessing ------------------------------------------------------
# rename columns:
VW <- VW %>%
rename(adj_close = "Adj Close") %>%
arrange(Date)
# check structure data
class(VW$Date)
str(VW)
# Subject data for Adj_close
VW_ts <- VW %>%
select(adj_close)
# set adj_close as time series object
VW_ts <- ts(VW_ts,
start = c(2009, 1), # start date: Januar 2009
frequency = 365.25) # Frequency: daily (also account for leap years every 4 years)
# plot dax_ts using ggplot2
autoplot(VW_ts) +
theme_few() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# make it more pretty
ggplot(VW,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# add Shares Column
VW_ts <- VW %>%
mutate(shares = "VW")
# save dataset
write_csv(VW_ts,
"main/Data_sets/VW_1.csv")
# BASH --------------------------------------------------------------------
# Third data BASH
# Load Data ---------------------------------------------------------------
basf <- read_csv("main/Data_sets/BASF.csv",
show_col_types = FALSE)
# Data Preprocessing ------------------------------------------------------
# rename columns:
basf <- basf %>%
rename(adj_close = "Adj Close") %>%
arrange(Date)
# check structure data
class(basf$Date)
str(basf)
# Subject data for Adj_close
basf_ts <- basf %>%
select(adj_close)
# set adj_close as time series object
basf_ts <- ts(basf_ts,
start = c(2010, 8), # start date: Januar 2009
frequency = 365.25) # Frequency: daily (also account for leap years every 4 years)
# plot dax_ts using ggplot2
autoplot(basf_ts) +
theme_few() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# make it more pretty
ggplot(basf,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
# add Shares Column
basf_ts <- basf %>%
mutate(shares = "BSAF")
# save dataset
write_csv(basf_ts,
"main/Data_sets/BSAF_1.csv")
# Append Data ------------------------------------------------------------------
stock <- rbind(dax_ts,
VW_ts,
basf_ts)
# clear environment
rm(VW,
dax,
basf)
# rearange by shares and then date
stock <- stock %>%
arrange(shares, Date)
# create unique ids by grouping
stock <- stock %>%
group_by(shares) %>%
mutate(ID = cur_group_id()) %>%
ungroup()
# Centered Moving Average -----------------------------------------------------
# by using a predefined function
# Co Pilot
# -----------------------------------------------------
# centered_ma <- function(x, k = 5) {
#   n <- length(x)
#   if (k %% 2 == 0) {
#     stop("k must be odd")
#   }
#   if (k > n) {
#     stop("k must be less than n")
#   }
#   half_k <- (k - 1) / 2
#   ma <- numeric(n)
#   for (i in 1:n) {
#     if (i < half_k + 1) {
#       ma[i] <- mean(x[1:(i + half_k)])
#     } else if (i > n - half_k) {
#       ma[i] <- mean(x[(i - half_k):n])
#     } else {
#       ma[i] <- mean(x[(i - half_k):(i + half_k)])
#     }
#   }
#   ma
# }
#
# # apply function to stock data
#
# stock <- stock %>%
#   group_by(ID) %>%
#   mutate(ma = centered_ma(adj_close, k = 5)) %>%
#   ungroup()
# -----------------------------------------------------
sm <- function(x, n = 5) {
stats::filter(x, rep(1/n, n), sides = 2) # choose two sides because it is centered
}
# WRONG example!!!
stock$sm_5_WRONG <- sm(stock$adj_close)
# This does go over all the rows and does not stop at the end of the group.
# CORRECT example!!!
stock <- stock %>%
group_by(ID) %>%
mutate(sm_5_CORRECT = sm(adj_close)) %>%
ungroup()
View(stock)
View(stock)
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t1 = rollmean(adj_close,
order = 5,
center = TRUE)) %>%
ungroup()
# using rollmean from the zoo package
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t1 = rollmean(adj_close,
k = 5,
center = TRUE)) %>%
ungroup()
# using rollmean from the zoo package
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t1 = rollmean(adj_close,
k = 5,
fill = NA,
align = "center")) %>%
ungroup()
View(stock)
# Another way to do it using ma() (moving averages)
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t2 = ma(adj_close,
order = 5,
center = TRUE)) %>%
ungroup()
# Another way to do it using ma() (moving averages)
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t2 = ma(adj_close,
order = 5,
center = TRUE)) %>%
ungroup()
?ma
# Another way to do it using ma() (moving averages)
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t2 = ma(adj_close,
order = 5,
centre = TRUE)) %>%
ungroup()
# What happens with a different order?
stock <- stock %>%
group_by(shares) %>%
mutate(sm_5_t3 = ma(adj_close,
order = 4,
centre = TRUE)) %>%
ungroup()
stock_dax <- filter(stock,
shares == "dax")
stock_dax <- stock_dax %>%
mutate(ma_dax15 = rollmean(Open,
k = 15,
align = "right",
fill = NA),
ma_dax_38 = rollmean(Open,
k = 38,
align = "right",
fill = NA),
ma_dax_200 = rollmean(Open,
k = 200,
align = "right",
fill = NA)
)
View(stock_dax)
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "yellow") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date)) +
geom_line(aes(y=Open), color = "grey") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "yellow") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "yellow") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date)) +
geom_line(aes(y=Open), color = "grey") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "yellow") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "yellow") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
View(stock)
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "green") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("blue", "red", "darkgreen", "grey"),
labels = c("Adj Close", "MA 15", "MA 38", "MA 200"))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("blue", "red", "darkgreen", "grey"),
labels = c("Adj Close", "MA 15", "MA 38", "MA 200"))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_few() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("blue", "red", "darkgreen", "grey"),
labels = c("Adj Close", "MA 15", "MA 38", "MA 200"))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
theme_minimal() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("blue", "red", "darkgreen", "grey"),
labels = c("Adj Close", "MA 15", "MA 38", "MA 200"))
ggplot(stock_dax,
aes(x = Date, y = adj_close)) +
geom_line(color = "blue") +
geom_line(aes(y = ma_dax15), color = "red") +
geom_line(aes(y = ma_dax_38), color = "darkgreen") +
geom_line(aes(y = ma_dax_200), color = "grey") +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("blue", "red", "darkgreen", "grey"),
labels = c("Adj Close", "MA 15", "MA 38", "MA 200"))
# this looks nice, let's add a legend
ggplot(stock_dax,
aes(x = Date)) +
geom_line(aes(y = adj_close, color = "Adj Close")) +
geom_line(aes(y = ma_dax15, color = "MA 15")) +
geom_line(aes(y = ma_dax_38, color = "MA 38")) +
geom_line(aes(y = ma_dax_200, color = "MA 200")) +
theme_stata() +
labs(title = "DAX Time Series",
x = "Year",
y = "Adjusted Close Price",
color = "Legend") + # Beschriftung für die Legende
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("Adj Close" = "blue",
"MA 15" = "red",
"MA 38" = "darkgreen",
"MA 200" = "grey"))
