autoplot(HP_out$cycle) +
theme_minimal() +
labs(title = "HP Filter",
x = "Year",
y = "Log GDP") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_stata()
# easier way to plot
plot(hpfilter(log_gdp_ts, freq = 1600))
plot(hpfilter(log_gdp_ts, freq = 1600))
plot(hpfilter(log_gdp_ts, freq = 1600))
plot(hpfilter(log_gdp_ts, freq = 1600))
mutate(
gr_log_gdp_1y = log_gdp - lag(log_gdp,
lag = 4),
gr_log_gdp_1q = log_gdp - lag(log_gdp,
lag = 1)
)
# Information -------------------------------------------------------------
# Forecasting Methods WiSe 24/25
# Jannes Ehrhardt
# Exercice VI
# Commands for version control with git:
# cd PATH
# git status
# git add .
# git commit -m "header"
# git push -u origin main
# clear global environment
rm(list = ls())
# Packages ----------------------------------------------------------------
# Install
# install.packages("tidyverse")
# Load
library(tidyverse)
library(estimatr)
library(modelsummary)
library(ggplot2)
library(ggthemes)
library(forecast)
library(lubridate)
library(zoo)
library(estimatr)
library(lubridate)
library(generics)
library(fpp3)
library(tseries)
library(cowplot)
library(mFilter)
# Working Directory -------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to script location
setwd("../..") # move up to the project root directory
getwd() # check if wd is the root directory
# Load Data ---------------------------------------------------------------
# load the waren data set
gdp <- read_csv("main/Data_sets/gdp.csv")
head(gdp)
# prepare data
gdp <- gdp %>%
mutate(
year = as.numeric(str_sub(time, 1,4)),
quarter = as.numeric(str_sub(time, 6)),
ID = row_number(),
log_gdp = log(gdp)
)
# Convert to TS -----------------------------------------------------------
gdp_ts <- ts(gdp$gdp,
start = c(1991, 1),
frequency = 4)
log_gdp_ts <- ts(gdp$log_gdp,,
start = c(1991, 1),
frequency = 4)
p1 <- autoplot(gdp_ts) +
theme_minimal() +
labs(title = "GDP",
x = "Year",
y = "GDP") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_stata()
p2 <- autoplot(log_gdp_ts) +
theme_minimal() +
labs(title = "Log GDP",
x = "Year",
y = "Log GDP") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_stata()
# combine both in 1 ggplot next to each other using cowplot package
plot_grid(p1, p2, labels = c("A", "B"), ncol = 2)
# Linear Detrending -------------------------------------------------------
lin_mod <- lm_robust(log_gdp ~ ID,
data = gdp)
# extract the fitted values (as ts-object):
lin_trend <- ts(lin_mod$fitted.values,
start = c(1991, 1),
frequency = 4)
# cycle component of the trend
lin_cycle <- log_gdp_ts - lin_trend
# plot that
autoplot(lin_cycle) +
theme_minimal() +
labs(title = "Linear Detrending",
x = "Year",
y = "Log GDP") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_stata()
# easier way would have been to use the hodrick filter:
# Hodrick-Prescott (HP) Filter: -------------------------------------------
# lambda value for cycle = 1600 (quarterly data)
hp_decomp <- hpfilter(log_gdp_ts,
freq = 16000)
# extract information from hp_decomp:
hp_trend <- hp_decomp$trend
hp_cycle <- hp_decomp$cycle
# combine these into a data.frame:
HP_out <- cbind(hp_decomp$x,
hp_decomp$trend,
hp_decomp$cycle)
colnames(HP_out) <- c("x", "trend", "cycle")
# store as df
HP_out <- as.data.frame(HP_out)
# easier way to plot
plot(hpfilter(log_gdp_ts, freq = 1600))
# what about the lambda value (freq)
# what if it is a monthy dataset: 14400
# annual: 10
# daily:  14400*30 (check it again)
View(gdp)
gdp <- gdp %>%
mutate(
gr_log_gdp_1y = log_gdp - lag(log_gdp,
lag = 4),
gr_log_gdp_1q = log_gdp - lag(log_gdp,
lag = 1)
)
gdp <- gdp %>%
mutate(
gr_log_gdp_1y = log_gdp - lag(log_gdp,
4),       # lag 4 quarters = lag 1 year
gr_log_gdp_1q = log_gdp - lag(log_gdp,
1).       # lag 1 quarter
gdp <- gdp %>%
mutate(
gr_log_gdp_1y = log_gdp - lag(log_gdp,
4),       # lag 4 quarters = lag 1 year
gr_log_gdp_1q = log_gdp - lag(log_gdp,
1).       # lag 1 quarter
gdp <- gdp %>%
mutate(
gr_log_gdp_1y = log_gdp - lag(log_gdp,
4),       # lag 4 quarters = lag 1 year
gr_log_gdp_1q = log_gdp - lag(log_gdp,
1)        # lag 1 quarter
)
p1 <- autoplot(gdp$gr_log_gdp_1y) +
theme_minimal() +
labs(title = "Growth Rate 1 Year",
x = "Year",
y = "Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_stata()
par(mfrow = c(1,1))
plot(gdp$gr_log_gdp_1y,
type = "l",
col = "darkblue",
ylab = "Growth Rate",
xlab = "Year",
main = "Growth Rate of Log GDP (1 year lag)",
lwd = 2)
lines(gdp$gr_log_gdp_1q,
type = "l",
col = "darkgreen",
lwd = 2)
lines(gdp$gr_log_gdp_1q,
type = "l",
col = "darkred",
lwd = 2)
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "darkgreen", "darkred"),
lwd = 2)
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "darkgreen", "darkred"),
lwd = 2,
lty = "1",
bty = "n"
)
par(mfrow = c(1,1))
plot(gdp$gr_log_gdp_1y,
type = "l",
col = "darkblue",
ylab = "Growth Rate",
xlab = "Year",
main = "Growth Rate of Log GDP (1 year lag)",
lwd = 2)
lines(gdp$gr_log_gdp_1q,
type = "l",
col = "darkgreen",
lwd = 2)
lines(HP_out$cycle,
type = "l",
col = "darkred",
lwd = 2)
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "darkgreen", "darkred"),
lwd = 2,
lty = "1",
bty = "n"
)
abline(h = 0,
col = "red")
abline(h = 0,
col = "grey")
par(mfrow = c(1,1))
plot(gdp$gr_log_gdp_1y,
type = "l",
col = "darkblue",
ylab = "Growth Rate",
xlab = "Year",
main = "Growth Rate of Log GDP (1 year lag)",
lwd = 2)
lines(gdp$gr_log_gdp_1q,
type = "l",
col = "darkgreen",
lwd = 2)
lines(HP_out$cycle,
type = "l",
col = "darkred",
lwd = 2)
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "darkgreen", "darkred"),
lwd = 2,
lty = 1,
bty = "n"
)
abline(h = 0,
col = "grey")
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "green", "red"),
lwd = 2,
lty = 1,
bty = "n"
)
par(mfrow = c(1,1))
plot(gdp$gr_log_gdp_1y,
type = "l",
col = "darkblue",
ylab = "Growth Rate",
xlab = "Year",
main = "Growth Rate of Log GDP (1 year lag)",
lwd = 2)
lines(gdp$gr_log_gdp_1q,
type = "l",
col = "green",
lwd = 2)
lines(HP_out$cycle,
type = "l",
col = "red",
lwd = 2)
legend("bottomleft",
legend = c("1 year growth", "1 quarter growth", "HP cycle"),
col = c("darkblue", "green", "red"),
lwd = 2,
lty = 1,
bty = "n"
)
abline(h = 0,
col = "grey")
library(urca)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to script location
setwd("../..") # move up to the project root directory
getwd() # check if wd is the root directory
library(readr)
# Deterministic Trend
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value")
# Deterministic Trend
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value")
# Deterministic Trend
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value")
# Simulate Data:
set.seed(1)
# Deterministic Trend
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value")
# Simulate Data:
set.seed(1)
# Deterministic Trend
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value")
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value") +
theme_stata()
set.seed(1)
df <- tibble(
t = 1:500,
uuid = rnorm(500,       # error term
mean = 0,
sd = 10)
) %>%
mutate(
y = NA_real_,
y = case_when(t == 1 ~ 1),
dt = case_when(t > 1 ~ 0.9 + t + uuid) # deterministic trend
)
# plot
ggplot(df, aes(x = t)) +
geom_line(aes(y = dt)) +
theme_minimal() +
labs(title = "Simulated Data",
x = "Time",
y = "Value") +
theme_stata()
df <- df %>%
mutate(
rw = cumsum(uuid) # random walk
)
View(df)
# doing it very baic here with base r
df$st <- df$y
for (i in 2:nrow(df)) {                 # second to nth row
df$st[i] <- 0.9 + df$st[i-1] + df$uuid[i]   # 0.9 = constant term (bo)
}
# doing it very baic here with base r
df$rw_nd <- df$y
for (i in 2:nrow(df)) {                 # second to nth row
df$rw_nd[i] <- df$rw_nd[i-1] + df$uuid[i]   # 0.9 = constant term (bo)
}
df_long <- df %>%
pivot_longer(cols = c(dt, rw, rw_nd),
names_to = "type",
values_to = "value")
View(df)
par(mfrow=c(1,3))
plot(df$dt, df$dt,
type = "l",
col = "blue",
xlab = "Time",
ylab = "Value",
main = "Deterministic Trend")
par(mfrow=c(1,3))
plot(df$dt,
type = "l",
col = "blue",
xlab = "Time",
ylab = "Value",
main = "Deterministic Trend")
plot(df$rw,
type = "l",
col = "red",
xlab = "Time",
ylab = "Value",
main = "Random Walk with Drift")
plot(df$rw_nd,
type = "l",
col = "green",
xlab = "Time",
ylab = "Value",
main = "Random Walk without Drift"))
plot(df$rw_nd,
type = "l",
col = "green",
xlab = "Time",
ylab = "Value",
main = "Random Walk without Drift")
par(mfrow=c(1,3))
plot(df$dt,
type = "l",
col = "blue",
xlab = "Index",
ylab = "Value",
main = "Deterministic Trend")
plot(df$rw,
type = "l",
col = "red",
xlab = "Index",
ylab = "Value",
main = "Random Walk with Drift")
plot(df$rw_nd,
type = "l",
col = "green",
xlab = "Index",
ylab = "Value",
main = "Random Walk without Drift")
par(mfrow=c(1,3))
plot(df$dt,
type = "l",
col = "blue",
xlab = "Index",
ylab = "Value",
main = "Deterministic Trend")
plot(df$st,
type = "l",
col = "red",
xlab = "Index",
ylab = "Value",
main = "Random Walk with Drift")
plot(df$rw_nd,
type = "l",
col = "green",
xlab = "Index",
ylab = "Value",
main = "Random Walk without Drift")
par(mfrow=c(1,3))
plot(df$dt,
type = "l",
col = "darkblue",
xlab = "Index",
ylab = "Value",
main = "Deterministic Trend")
plot(df$st,
type = "l",
col = "darkred",
xlab = "Index",
ylab = "Value",
main = "Random Walk with Drift")
plot(df$rw_nd,
type = "l",
col = "darkgreen",
xlab = "Index",
ylab = "Value",
main = "Random Walk without Drift")
